input CreatePostInput {
  description: String!
  imageUrl: String!
  clientMutationId: String
}

type CreatePostPayload {
  post: Post
  clientMutationId: String
}

input DeletePostInput {
  id: ID!
  clientMutationId: String
}

type DeletePostPayload {
  deletedId: ID
  clientMutationId: String
}

type Mutation {
  createPost(input: CreatePostInput!): CreatePostPayload
  deletePost(input: DeletePostInput!): DeletePostPayload
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Post implements Node {
  """The ID of an object"""
  id: ID!
  description: String
  imageUrl: String
}

"""A connection to a list of items."""
type PostConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PostEdge]
}

"""An edge in a connection."""
type PostEdge {
  """The item at the end of the edge"""
  node: Post

  """A cursor for use in pagination"""
  cursor: String!
}

type Query {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
  viewer: Viewer
}

type Viewer implements Node {
  """The ID of an object"""
  id: ID!
  allPosts(after: String, first: Int, before: String, last: Int): PostConnection
}
